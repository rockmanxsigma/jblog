#!/usr/bin/env node

/**
 * Script de cr√©ation de donn√©es de test
 * Cr√©e des utilisateurs, articles et commentaires de test
 */

import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

// Charger les mod√®les Mongoose
import '../src/models/User.js';
import '../src/models/Post.js';
import '../src/models/Comment.js';

console.log('üöÄ Cr√©ation de donn√©es de test...');

const createTestData = async () => {
  try {
    // Connexion √† MongoDB local
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/jgazette';
    console.log('üì° Connexion √† MongoDB local:', mongoUri);
    
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connexion r√©ussie !');

    const User = mongoose.model('User');
    const Post = mongoose.model('Post');
    const Comment = mongoose.model('Comment');

    // V√©rifier si des donn√©es existent d√©j√†
    const existingUsers = await User.countDocuments();
    const existingPosts = await Post.countDocuments();
    const existingComments = await Comment.countDocuments();

    if (existingUsers > 0 || existingPosts > 0 || existingComments > 0) {
      console.log('‚ö†Ô∏è  Des donn√©es existent d√©j√†:');
      console.log(`  - Utilisateurs: ${existingUsers}`);
      console.log(`  - Articles: ${existingPosts}`);
      console.log(`  - Commentaires: ${existingComments}`);
      
      const readline = await import('readline');
      const rl = readline.createInterface({
        input: process.stdin,
        output: process.stdout
      });

      const answer = await new Promise((resolve) => {
        rl.question('Voulez-vous continuer et ajouter des donn√©es de test ? (y/N): ', resolve);
      });

      rl.close();

      if (answer.toLowerCase() !== 'y' && answer.toLowerCase() !== 'yes') {
        console.log('‚ùå Cr√©ation annul√©e par l\'utilisateur');
        process.exit(0);
      }
    }

    console.log('\nüë• Cr√©ation des utilisateurs...');

    // Cr√©er des utilisateurs de test
    const hashedPassword = await bcrypt.hash('password123', 10);
    
    const users = [
      {
        username: 'admin',
        email: 'admin@jblog.com',
        password: hashedPassword,
        role: 'admin',
        profile: {
          firstName: 'Admin',
          lastName: 'User',
          avatar: 'https://via.placeholder.com/150'
        }
      },
      {
        username: 'publisher',
        email: 'publisher@jblog.com',
        password: hashedPassword,
        role: 'publisher',
        profile: {
          firstName: 'John',
          lastName: 'Publisher',
          avatar: 'https://via.placeholder.com/150'
        }
      },
      {
        username: 'moderator',
        email: 'moderator@jblog.com',
        password: hashedPassword,
        role: 'moderator',
        profile: {
          firstName: 'Jane',
          lastName: 'Moderator',
          avatar: 'https://via.placeholder.com/150'
        }
      },
      {
        username: 'user1',
        email: 'user1@jblog.com',
        password: hashedPassword,
        role: 'user',
        profile: {
          firstName: 'Alice',
          lastName: 'User',
          avatar: 'https://via.placeholder.com/150'
        }
      },
      {
        username: 'user2',
        email: 'user2@jblog.com',
        password: hashedPassword,
        role: 'user',
        profile: {
          firstName: 'Bob',
          lastName: 'User',
          avatar: 'https://via.placeholder.com/150'
        }
      }
    ];

    const createdUsers = await User.insertMany(users);
    console.log(`‚úÖ ${createdUsers.length} utilisateurs cr√©√©s`);

    console.log('\nüìù Cr√©ation des articles...');

    // Cr√©er des articles de test
    const posts = [
      {
        title: 'Bienvenue sur jBlog',
        slug: 'bienvenue-sur-jblog',
        content: `# Bienvenue sur jBlog !

Ceci est le premier article de votre blog. Vous pouvez :

- Cr√©er de nouveaux articles
- G√©rer les commentaires
- Uploader des images
- Personnaliser votre contenu

## Fonctionnalit√©s

- **Syst√®me de cooldown** : Limite anti-spam pour les commentaires
- **Upload d'images** : Support des images pour vos articles
- **Gestion des utilisateurs** : R√¥les et permissions
- **Interface moderne** : Design responsive avec Tailwind CSS

Bon blogging ! üöÄ`,
        excerpt: 'D√©couvrez les fonctionnalit√©s de votre nouveau blog jBlog',
        author: createdUsers[0]._id,
        tags: ['blog', 'bienvenue', 'fonctionnalit√©s'],
        status: 'published',
        featuredImage: 'https://via.placeholder.com/800x400/4F46E5/FFFFFF?text=jBlog+Welcome'
      },
      {
        title: 'Guide de Migration MongoDB Atlas',
        slug: 'guide-migration-mongodb-atlas',
        content: `# Guide de Migration MongoDB Atlas

Ce guide vous accompagne dans la migration de votre base de donn√©es MongoDB locale vers MongoDB Atlas.

## Avantages d'Atlas

- **Scalabilit√©** : Mont√©e en charge automatique
- **Sauvegarde** : Backups automatiques
- **Monitoring** : M√©triques en temps r√©el
- **S√©curit√©** : Chiffrement et authentification

## √âtapes de migration

1. Configuration du cluster Atlas
2. Export des donn√©es locales
3. Import vers Atlas
4. Test et validation

Suivez le guide complet pour une migration r√©ussie !`,
        excerpt: 'Apprenez √† migrer votre base de donn√©es vers MongoDB Atlas',
        author: createdUsers[1]._id,
        tags: ['mongodb', 'atlas', 'migration', 'tutoriel'],
        status: 'published',
        featuredImage: 'https://via.placeholder.com/800x400/059669/FFFFFF?text=MongoDB+Atlas'
      },
      {
        title: 'Syst√®me de Cooldown Anti-Spam',
        slug: 'systeme-cooldown-anti-spam',
        content: `# Syst√®me de Cooldown Anti-Spam

Le syst√®me de cooldown emp√™che le spam dans les commentaires en imposant des d√©lais entre les publications.

## Limites par r√¥le

- **Utilisateur** : 5 minutes entre chaque commentaire
- **Mod√©rateur** : 2 minutes entre chaque commentaire
- **Publisher/Admin** : 1 minute entre chaque commentaire

## Fonctionnement

Le syst√®me v√©rifie automatiquement le temps √©coul√© depuis le dernier commentaire et affiche un timer en temps r√©el.

Cela am√©liore la qualit√© des discussions et r√©duit le spam !`,
        excerpt: 'D√©couvrez le syst√®me de cooldown qui prot√®ge votre blog du spam',
        author: createdUsers[0]._id,
        tags: ['cooldown', 'anti-spam', 'commentaires', 's√©curit√©'],
        status: 'published',
        featuredImage: 'https://via.placeholder.com/800x400/DC2626/FFFFFF?text=Anti-Spam+System'
      }
    ];

    const createdPosts = await Post.insertMany(posts);
    console.log(`‚úÖ ${createdPosts.length} articles cr√©√©s`);

    console.log('\nüí¨ Cr√©ation des commentaires...');

    // Cr√©er des commentaires de test
    const comments = [
      {
        content: 'Excellent article ! Merci pour ce guide d√©taill√©.',
        author: createdUsers[3]._id,
        post: createdPosts[0]._id,
        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000) // Il y a 2 heures
      },
      {
        content: 'Tr√®s utile, je vais essayer la migration vers Atlas.',
        author: createdUsers[4]._id,
        post: createdPosts[1]._id,
        createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000) // Il y a 1 heure
      },
      {
        content: 'Le syst√®me de cooldown est une excellente id√©e pour √©viter le spam.',
        author: createdUsers[3]._id,
        post: createdPosts[2]._id,
        createdAt: new Date(Date.now() - 30 * 60 * 1000) // Il y a 30 minutes
      },
      {
        content: 'J\'ai une question sur la configuration des d√©lais. Peux-tu m\'aider ?',
        author: createdUsers[4]._id,
        post: createdPosts[2]._id,
        createdAt: new Date(Date.now() - 10 * 60 * 1000) // Il y a 10 minutes
      }
    ];

    const createdComments = await Comment.insertMany(comments);
    console.log(`‚úÖ ${createdComments.length} commentaires cr√©√©s`);

    // Mettre √† jour les compteurs de commentaires dans les posts
    for (const post of createdPosts) {
      const commentCount = await Comment.countDocuments({ post: post._id });
      await Post.findByIdAndUpdate(post._id, { 
        $set: { 
          commentsCount: commentCount,
          likesCount: Math.floor(Math.random() * 10) // Likes al√©atoires
        } 
      });
    }

    console.log('\nüìä R√©sum√© des donn√©es cr√©√©es:');
    console.log(`üë• Utilisateurs: ${createdUsers.length}`);
    console.log(`üìù Articles: ${createdPosts.length}`);
    console.log(`üí¨ Commentaires: ${createdComments.length}`);

    console.log('\nüéØ Identifiants de test:');
    console.log('Tous les utilisateurs ont le mot de passe: password123');
    console.log('- admin@jblog.com (Admin)');
    console.log('- publisher@jblog.com (Publisher)');
    console.log('- moderator@jblog.com (Moderator)');
    console.log('- user1@jblog.com (User)');
    console.log('- user2@jblog.com (User)');

    console.log('\n‚úÖ Donn√©es de test cr√©√©es avec succ√®s !');
    console.log('üöÄ Vous pouvez maintenant exporter vos donn√©es avec: npm run export-data-nodejs');

  } catch (error) {
    console.error('‚ùå Erreur lors de la cr√©ation des donn√©es:', error.message);
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Connexion ferm√©e');
  }
};

createTestData();
