import mongoose from 'mongoose';
import dotenv from 'dotenv';
import Post from '../src/models/Post.js';
import User from '../src/models/User.js';

dotenv.config();

const forceAtlasData = async () => {
  try {
    const atlasUri = process.env.MONGODB_ATLAS_URI;
    if (!atlasUri) {
      console.error('‚ùå Erreur: MONGODB_ATLAS_URI n\'est pas d√©finie dans les variables d\'environnement.');
      return;
    }

    console.log('üîç Connexion √† MongoDB Atlas...');

    const options = {
      useNewUrlParser: true,
      useUnifiedTopology: true,
      maxPoolSize: 10,
      serverSelectionTimeoutMS: 5000,
      socketTimeoutMS: 45000,
    };

    await mongoose.connect(atlasUri, options);
    console.log('‚úÖ Connexion Atlas r√©ussie !');
    console.log(`üåê Host: ${mongoose.connection.host}`);
    console.log(`üìä Base de donn√©es: ${mongoose.connection.name}`);

    // V√©rifier les posts actuels
    const currentPosts = await Post.find({});
    console.log(`\nüìù Posts actuels dans Atlas: ${currentPosts.length}`);
    
    if (currentPosts.length > 0) {
      console.log('   Titres des posts actuels:');
      currentPosts.forEach(post => {
        console.log(`   - ${post.title} (ID: ${post._id})`);
      });
    }

    // V√©rifier si les posts ont des IDs simples (1, 2) ou des ObjectId
    const simpleIdPosts = currentPosts.filter(post => 
      post._id.toString().length < 10 || 
      post._id.toString() === '1' || 
      post._id.toString() === '2'
    );

    if (simpleIdPosts.length > 0) {
      console.log('\n‚ö†Ô∏è  D√©tection de posts avec des IDs simples (probablement des donn√©es de test)');
      console.log('   Ces posts seront supprim√©s pour forcer l\'utilisation des vraies donn√©es Atlas');
      
      // Supprimer les posts avec des IDs simples
      await Post.deleteMany({ _id: { $in: simpleIdPosts.map(p => p._id) } });
      console.log(`üóëÔ∏è  ${simpleIdPosts.length} posts avec IDs simples supprim√©s`);
    }

    // V√©rifier les posts restants
    const remainingPosts = await Post.find({});
    console.log(`\nüìù Posts restants dans Atlas: ${remainingPosts.length}`);
    
    if (remainingPosts.length > 0) {
      console.log('   Titres des posts restants:');
      remainingPosts.forEach(post => {
        console.log(`   - ${post.title} (ID: ${post._id})`);
      });
    }

    // Si aucun post restant, cr√©er des posts de test avec des ObjectId valides
    if (remainingPosts.length === 0) {
      console.log('\nüìù Aucun post restant, cr√©ation de posts de test avec ObjectId valides...');
      
      // R√©cup√©rer l'utilisateur admin
      const adminUser = await User.findOne({ email: 'admin@jgazette.com' });
      if (!adminUser) {
        console.log('‚ùå Utilisateur admin non trouv√©. Cr√©ation d\'un utilisateur admin...');
        const newAdmin = new User({
          username: 'admin',
          email: 'admin@jgazette.com',
          password: 'admin123',
          role: 'ADMIN',
          profile: {
            firstName: 'Admin',
            lastName: 'User'
          }
        });
        await newAdmin.save();
        console.log('‚úÖ Utilisateur admin cr√©√©');
      }

      // Cr√©er des posts de test avec des ObjectId valides
      const testPosts = [
        {
          title: 'Introduction √† JavaScript',
          excerpt: 'D√©couvrez les bases de JavaScript avec des exemples pratiques',
          content: 'JavaScript est un langage de programmation dynamique et orient√© objet...',
          slug: 'introduction-javascript',
          tags: ['javascript', 'programming', 'web'],
          status: 'published',
          readTime: 5
        },
        {
          title: 'Les bases de Python',
          excerpt: 'Apprenez Python de z√©ro avec des exemples concrets',
          content: 'Python est un langage de programmation simple et puissant...',
          slug: 'bases-python',
          tags: ['python', 'programming', 'tutorial'],
          status: 'published',
          readTime: 7
        },
        {
          title: 'Guide CSS Avanc√©',
          excerpt: 'Ma√Ætrisez les techniques CSS avanc√©es pour cr√©er des designs modernes',
          content: 'CSS3 offre de nombreuses possibilit√©s pour cr√©er des designs modernes...',
          slug: 'guide-css-avance',
          tags: ['css', 'design', 'web'],
          status: 'published',
          readTime: 10
        }
      ];

      const finalAdminUser = await User.findOne({ email: 'admin@jgazette.com' });
      
      for (const postData of testPosts) {
        const post = new Post({
          ...postData,
          author: finalAdminUser._id,
          publishedAt: new Date()
        });
        await post.save();
        console.log(`‚úÖ Post cr√©√©: ${post.title} (ID: ${post._id})`);
      }
    }

    console.log('\nüéâ Script termin√© !');
    console.log('üìä V√©rification finale des posts:');
    const finalPosts = await Post.find({});
    console.log(`   Total: ${finalPosts.length} posts`);
    finalPosts.forEach(post => {
      console.log(`   - ${post.title} (ID: ${post._id})`);
    });

    await mongoose.disconnect();
    console.log('\nüîå Connexion ferm√©e');

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
    process.exit(1);
  }
};

forceAtlasData();
