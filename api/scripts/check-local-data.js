#!/usr/bin/env node

/**
 * Script de v√©rification des donn√©es MongoDB locales
 * V√©rifie si la base de donn√©es contient des donn√©es
 */

import mongoose from 'mongoose';
import dotenv from 'dotenv';

// Charger les variables d'environnement
dotenv.config();

// Charger les mod√®les Mongoose
import '../src/models/User.js';
import '../src/models/Post.js';
import '../src/models/Comment.js';

console.log('üîç V√©rification des donn√©es MongoDB locales...');

const checkData = async () => {
  try {
    // Connexion √† MongoDB local
    const mongoUri = process.env.MONGODB_URI || 'mongodb://localhost:27017/jgazette';
    console.log('üì° Connexion √† MongoDB local:', mongoUri);
    
    await mongoose.connect(mongoUri);
    console.log('‚úÖ Connexion r√©ussie !');

    // V√©rifier la base de donn√©es
    const db = mongoose.connection.db;
    const dbName = db.databaseName;
    console.log(`üìä Base de donn√©es: ${dbName}`);

    // Lister toutes les collections
    const collections = await db.listCollections().toArray();
    console.log(`\nüìã Collections trouv√©es (${collections.length}):`);
    
    if (collections.length === 0) {
      console.log('‚ö†Ô∏è  Aucune collection trouv√©e dans la base de donn√©es');
      console.log('üí° La base de donn√©es est vide ou n\'existe pas');
    } else {
      for (const collection of collections) {
        const count = await db.collection(collection.name).countDocuments();
        console.log(`  - ${collection.name}: ${count} documents`);
      }
    }

    // V√©rifier sp√©cifiquement nos mod√®les
    console.log('\nüß™ V√©rification des mod√®les Mongoose:');
    
    try {
      const User = mongoose.model('User');
      const Post = mongoose.model('Post');
      const Comment = mongoose.model('Comment');
      
      const userCount = await User.countDocuments();
      const postCount = await Post.countDocuments();
      const commentCount = await Comment.countDocuments();
      
      console.log(`üë• Utilisateurs: ${userCount}`);
      console.log(`üìù Articles: ${postCount}`);
      console.log(`üí¨ Commentaires: ${commentCount}`);
      
      if (userCount === 0 && postCount === 0 && commentCount === 0) {
        console.log('\n‚ö†Ô∏è  Aucune donn√©e trouv√©e dans les mod√®les principaux');
        console.log('üí° Solutions possibles:');
        console.log('  1. V√©rifiez que MongoDB local est d√©marr√©');
        console.log('  2. V√©rifiez le nom de la base de donn√©es dans MONGODB_URI');
        console.log('  3. Cr√©ez des donn√©es de test avec: npm run seed');
        console.log('  4. Cr√©ez un utilisateur admin avec: npm run create-users');
      }
      
    } catch (modelError) {
      console.log('‚ùå Erreur lors de la v√©rification des mod√®les:', modelError.message);
    }

    // V√©rifier la connexion MongoDB
    console.log('\nüîå Informations de connexion:');
    console.log(`Host: ${mongoose.connection.host}`);
    console.log(`Port: ${mongoose.connection.port}`);
    console.log(`√âtat: ${mongoose.connection.readyState === 1 ? 'Connect√©' : 'D√©connect√©'}`);

  } catch (error) {
    console.error('‚ùå Erreur lors de la v√©rification:', error.message);
    
    if (error.message.includes('ECONNREFUSED')) {
      console.log('\nüí° MongoDB local n\'est pas d√©marr√©');
      console.log('Solutions:');
      console.log('1. D√©marrez MongoDB local');
      console.log('2. V√©rifiez que MongoDB √©coute sur le port 27017');
      console.log('3. V√©rifiez la configuration dans MONGODB_URI');
    }
    
    if (error.message.includes('authentication')) {
      console.log('\nüí° Probl√®me d\'authentification MongoDB');
      console.log('V√©rifiez vos identifiants dans MONGODB_URI');
    }
    
    process.exit(1);
  } finally {
    await mongoose.disconnect();
    console.log('\nüîå Connexion ferm√©e');
  }
};

checkData();
